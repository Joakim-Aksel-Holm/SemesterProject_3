@inherits LayoutComponentBase
@page "/workers"
@layout WorkerLayout
@using BeerProduction.Services
@using BeerProduction.Model
@inject DatabaseConnection Db

<h1>Employees</h1>

@if (_loading)
{
    <p>Loadingâ€¦</p>
}
else if (_error is not null)
{
    <p style="color:#b00">@_error</p>
}
else if (_employees.Count == 0)
{
    <p>No employees found.</p>
}
else
{
    <table class="table" style="width:100%; border-collapse:collapse;">
        <thead>
            <tr><th>ID</th><th>Name</th><th>Role</th><th>Hired</th></tr>
        </thead>
        <tbody>
        @foreach (var e in _employees)
        {
            <tr>
                <td>@e.Id</td>
                <td>@e.Name</td>
                <td>@e.Role</td>
                <td>@e.HiredOn.ToString("yyyy-MM-dd")</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _loading = true;
    private string? _error;
    private List<Employee> _employees = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await using var conn = await Db.OpenAsync();
            await using var cmd = conn.CreateCommand();
            cmd.CommandText = "SELECT id, name, role, hired_on FROM public.employee ORDER BY id;";
            await using var rdr = await cmd.ExecuteReaderAsync();
            while (await rdr.ReadAsync())
            {
                _employees.Add(new Employee(
                    rdr.GetInt32(0),
                    rdr.GetString(1),
                    rdr.GetString(2),
                    rdr.GetDateTime(3)
                ));
            }
        }
        catch (Exception ex)
        {
            _error = "Failed to load employees: " + ex.Message;
        }
        finally { _loading = false; }
    }
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">ðŸ—™</span>
</div>